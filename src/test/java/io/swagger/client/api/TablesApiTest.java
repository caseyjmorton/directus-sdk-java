/*
 * directus.io
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.directus.client.ApiException;
import io.directus.client.model.GetTable;
import io.directus.client.model.GetTableColumn;
import io.directus.client.model.GetTableColumns;
import io.directus.client.model.GetTableRow;
import io.directus.client.model.GetTableRows;
import io.directus.client.model.GetTables;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TablesApi
 */
@Ignore
public class TablesApiTest {

    private final TablesApi api = new TablesApi();

    
    /**
     * Create a column in a given table
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addColumnTest() throws ApiException {
        String tableId = null;
        String tableName = null;
        String columnName = null;
        String type = null;
        String ui = null;
        Boolean hiddenInput = null;
        Boolean hiddenList = null;
        Boolean required = null;
        Integer sort = null;
        String comment = null;
        String relationshipType = null;
        String relatedTable = null;
        String junctionTable = null;
        String junctionKeyLeft = null;
        String junctionKeyRight = null;
        api.addColumn(tableId, tableName, columnName, type, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);

        // TODO: test validations
    }
    
    /**
     * Add a new row
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRowTest() throws ApiException {
        String tableId = null;
        String customData = null;
        api.addRow(tableId, customData);

        // TODO: test validations
    }
    
    /**
     * Add a new table
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTableTest() throws ApiException {
        String name = null;
        api.addTable(name);

        // TODO: test validations
    }
    
    /**
     * Delete row
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteColumnTest() throws ApiException {
        String tableId = null;
        String columnName = null;
        api.deleteColumn(tableId, columnName);

        // TODO: test validations
    }
    
    /**
     * Delete row
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRowTest() throws ApiException {
        String tableId = null;
        Integer rowId = null;
        api.deleteRow(tableId, rowId);

        // TODO: test validations
    }
    
    /**
     * Delete Table
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTableTest() throws ApiException {
        String tableId = null;
        api.deleteTable(tableId);

        // TODO: test validations
    }
    
    /**
     * Returns specific table
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTableTest() throws ApiException {
        String tableId = null;
        GetTable response = api.getTable(tableId);

        // TODO: test validations
    }
    
    /**
     * Returns specific table column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTableColumnTest() throws ApiException {
        String tableId = null;
        String columnName = null;
        GetTableColumn response = api.getTableColumn(tableId, columnName);

        // TODO: test validations
    }
    
    /**
     * Returns table columns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTableColumnsTest() throws ApiException {
        String tableId = null;
        GetTableColumns response = api.getTableColumns(tableId);

        // TODO: test validations
    }
    
    /**
     * Returns specific table row
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTableRowTest() throws ApiException {
        String tableId = null;
        Integer rowId = null;
        GetTableRow response = api.getTableRow(tableId, rowId);

        // TODO: test validations
    }
    
    /**
     * Returns table rows
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTableRowsTest() throws ApiException {
        String tableId = null;
        GetTableRows response = api.getTableRows(tableId);

        // TODO: test validations
    }
    
    /**
     * Returns tables
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTablesTest() throws ApiException {
        GetTables response = api.getTables();

        // TODO: test validations
    }
    
    /**
     * Update column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateColumnTest() throws ApiException {
        String tableId = null;
        String columnName = null;
        String dataType = null;
        String ui = null;
        Boolean hiddenInput = null;
        Boolean hiddenList = null;
        Boolean required = null;
        Integer sort = null;
        String comment = null;
        String relationshipType = null;
        String relatedTable = null;
        String junctionTable = null;
        String junctionKeyLeft = null;
        String junctionKeyRight = null;
        api.updateColumn(tableId, columnName, dataType, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);

        // TODO: test validations
    }
    
    /**
     * Update row
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRowTest() throws ApiException {
        String tableId = null;
        Integer rowId = null;
        String customData = null;
        api.updateRow(tableId, rowId, customData);

        // TODO: test validations
    }
    
}
