/*
 * directus.io
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.directus.client.ApiException;
import io.directus.client.model.GetGroup;
import io.directus.client.model.GetGroups;
import io.directus.client.model.GetPrivileges;
import io.directus.client.model.GetPrivilegesForTable;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Ignore
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    
    /**
     * Add a new group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupTest() throws ApiException {
        String name = null;
        api.addGroup(name);

        // TODO: test validations
    }
    
    /**
     * Create new table privileges for the specified user group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPrivilegeTest() throws ApiException {
        String groupId = null;
        Integer id = null;
        String tableName = null;
        Integer allowAdd = null;
        Integer allowEdit = null;
        Integer allowDelete = null;
        Integer allowView = null;
        Integer allowAlter = null;
        Boolean navListed = null;
        String readFieldBlacklist = null;
        String writeFieldBlacklist = null;
        String statusId = null;
        api.addPrivilege(groupId, id, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);

        // TODO: test validations
    }
    
    /**
     * Returns specific group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupTest() throws ApiException {
        String groupId = null;
        GetGroup response = api.getGroup(groupId);

        // TODO: test validations
    }
    
    /**
     * Returns groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsTest() throws ApiException {
        GetGroups response = api.getGroups();

        // TODO: test validations
    }
    
    /**
     * Returns group privileges
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrivilegesTest() throws ApiException {
        String groupId = null;
        GetPrivileges response = api.getPrivileges(groupId);

        // TODO: test validations
    }
    
    /**
     * Returns group privileges by tableName
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrivilegesForTableTest() throws ApiException {
        String groupId = null;
        String tableNameOrPrivilegeId = null;
        GetPrivilegesForTable response = api.getPrivilegesForTable(groupId, tableNameOrPrivilegeId);

        // TODO: test validations
    }
    
    /**
     * Update privileges by privilegeId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePrivilegesTest() throws ApiException {
        String groupId = null;
        String tableNameOrPrivilegeId = null;
        String privilegesId = null;
        String groupId2 = null;
        String tableName = null;
        Integer allowAdd = null;
        Integer allowEdit = null;
        Integer allowDelete = null;
        Integer allowView = null;
        Integer allowAlter = null;
        Boolean navListed = null;
        String readFieldBlacklist = null;
        String writeFieldBlacklist = null;
        String statusId = null;
        api.updatePrivileges(groupId, tableNameOrPrivilegeId, privilegesId, groupId2, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);

        // TODO: test validations
    }
    
}
