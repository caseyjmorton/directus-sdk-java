/*
 * directus.io
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.directus.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * GetTableColumnData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-03T21:48:16.590Z")
public class GetTableColumnData {
  @SerializedName("id")
  private String id = null;

  @SerializedName("column_name")
  private String columnName = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("char_length")
  private String charLength = null;

  @SerializedName("is_nullable")
  private String isNullable = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("sort")
  private Integer sort = null;

  @SerializedName("system")
  private Boolean system = null;

  @SerializedName("master")
  private Boolean master = null;

  @SerializedName("hidden_list")
  private Boolean hiddenList = null;

  @SerializedName("hidden_input")
  private Boolean hiddenInput = null;

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("column_type")
  private String columnType = null;

  @SerializedName("is_writable")
  private Boolean isWritable = null;

  @SerializedName("ui")
  private String ui = null;

  @SerializedName("options")
  private List<Object> options = null;

  public GetTableColumnData id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public GetTableColumnData columnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

   /**
   * Get columnName
   * @return columnName
  **/
  @ApiModelProperty(value = "")
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }

  public GetTableColumnData type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public GetTableColumnData charLength(String charLength) {
    this.charLength = charLength;
    return this;
  }

   /**
   * Get charLength
   * @return charLength
  **/
  @ApiModelProperty(value = "")
  public String getCharLength() {
    return charLength;
  }

  public void setCharLength(String charLength) {
    this.charLength = charLength;
  }

  public GetTableColumnData isNullable(String isNullable) {
    this.isNullable = isNullable;
    return this;
  }

   /**
   * Get isNullable
   * @return isNullable
  **/
  @ApiModelProperty(value = "")
  public String getIsNullable() {
    return isNullable;
  }

  public void setIsNullable(String isNullable) {
    this.isNullable = isNullable;
  }

  public GetTableColumnData comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @ApiModelProperty(value = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public GetTableColumnData sort(Integer sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @ApiModelProperty(value = "")
  public Integer getSort() {
    return sort;
  }

  public void setSort(Integer sort) {
    this.sort = sort;
  }

  public GetTableColumnData system(Boolean system) {
    this.system = system;
    return this;
  }

   /**
   * Get system
   * @return system
  **/
  @ApiModelProperty(value = "")
  public Boolean isSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }

  public GetTableColumnData master(Boolean master) {
    this.master = master;
    return this;
  }

   /**
   * Get master
   * @return master
  **/
  @ApiModelProperty(value = "")
  public Boolean isMaster() {
    return master;
  }

  public void setMaster(Boolean master) {
    this.master = master;
  }

  public GetTableColumnData hiddenList(Boolean hiddenList) {
    this.hiddenList = hiddenList;
    return this;
  }

   /**
   * Get hiddenList
   * @return hiddenList
  **/
  @ApiModelProperty(value = "")
  public Boolean isHiddenList() {
    return hiddenList;
  }

  public void setHiddenList(Boolean hiddenList) {
    this.hiddenList = hiddenList;
  }

  public GetTableColumnData hiddenInput(Boolean hiddenInput) {
    this.hiddenInput = hiddenInput;
    return this;
  }

   /**
   * Get hiddenInput
   * @return hiddenInput
  **/
  @ApiModelProperty(value = "")
  public Boolean isHiddenInput() {
    return hiddenInput;
  }

  public void setHiddenInput(Boolean hiddenInput) {
    this.hiddenInput = hiddenInput;
  }

  public GetTableColumnData required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Get required
   * @return required
  **/
  @ApiModelProperty(value = "")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public GetTableColumnData columnType(String columnType) {
    this.columnType = columnType;
    return this;
  }

   /**
   * Get columnType
   * @return columnType
  **/
  @ApiModelProperty(value = "")
  public String getColumnType() {
    return columnType;
  }

  public void setColumnType(String columnType) {
    this.columnType = columnType;
  }

  public GetTableColumnData isWritable(Boolean isWritable) {
    this.isWritable = isWritable;
    return this;
  }

   /**
   * Get isWritable
   * @return isWritable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsWritable() {
    return isWritable;
  }

  public void setIsWritable(Boolean isWritable) {
    this.isWritable = isWritable;
  }

  public GetTableColumnData ui(String ui) {
    this.ui = ui;
    return this;
  }

   /**
   * Get ui
   * @return ui
  **/
  @ApiModelProperty(value = "")
  public String getUi() {
    return ui;
  }

  public void setUi(String ui) {
    this.ui = ui;
  }

  public GetTableColumnData options(List<Object> options) {
    this.options = options;
    return this;
  }

  public GetTableColumnData addOptionsItem(Object optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<Object>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @ApiModelProperty(value = "")
  public List<Object> getOptions() {
    return options;
  }

  public void setOptions(List<Object> options) {
    this.options = options;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTableColumnData getTableColumnData = (GetTableColumnData) o;
    return Objects.equals(this.id, getTableColumnData.id) &&
        Objects.equals(this.columnName, getTableColumnData.columnName) &&
        Objects.equals(this.type, getTableColumnData.type) &&
        Objects.equals(this.charLength, getTableColumnData.charLength) &&
        Objects.equals(this.isNullable, getTableColumnData.isNullable) &&
        Objects.equals(this.comment, getTableColumnData.comment) &&
        Objects.equals(this.sort, getTableColumnData.sort) &&
        Objects.equals(this.system, getTableColumnData.system) &&
        Objects.equals(this.master, getTableColumnData.master) &&
        Objects.equals(this.hiddenList, getTableColumnData.hiddenList) &&
        Objects.equals(this.hiddenInput, getTableColumnData.hiddenInput) &&
        Objects.equals(this.required, getTableColumnData.required) &&
        Objects.equals(this.columnType, getTableColumnData.columnType) &&
        Objects.equals(this.isWritable, getTableColumnData.isWritable) &&
        Objects.equals(this.ui, getTableColumnData.ui) &&
        Objects.equals(this.options, getTableColumnData.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, columnName, type, charLength, isNullable, comment, sort, system, master, hiddenList, hiddenInput, required, columnType, isWritable, ui, options);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTableColumnData {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    charLength: ").append(toIndentedString(charLength)).append("\n");
    sb.append("    isNullable: ").append(toIndentedString(isNullable)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    hiddenList: ").append(toIndentedString(hiddenList)).append("\n");
    sb.append("    hiddenInput: ").append(toIndentedString(hiddenInput)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    columnType: ").append(toIndentedString(columnType)).append("\n");
    sb.append("    isWritable: ").append(toIndentedString(isWritable)).append("\n");
    sb.append("    ui: ").append(toIndentedString(ui)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

