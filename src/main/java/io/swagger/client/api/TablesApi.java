/*
 * directus.io
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.directus.client.ApiCallback;
import io.directus.client.ApiClient;
import io.directus.client.ApiException;
import io.directus.client.ApiResponse;
import io.directus.client.Configuration;
import io.directus.client.Pair;
import io.directus.client.ProgressRequestBody;
import io.directus.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.directus.client.model.GetTable;
import io.directus.client.model.GetTableColumn;
import io.directus.client.model.GetTableColumns;
import io.directus.client.model.GetTableRow;
import io.directus.client.model.GetTableRows;
import io.directus.client.model.GetTables;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TablesApi {
    private ApiClient apiClient;

    public TablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TablesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addColumn
     * @param tableId ID of table to return rows from (required)
     * @param tableName Name of table to add (optional)
     * @param columnName The unique name of the column to create (optional)
     * @param type The datatype of the column, eg: INT (optional)
     * @param ui The Directus Interface to use for this column (optional)
     * @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
     * @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
     * @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param comment A helpful note to users for this column (optional)
     * @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
     * @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
     * @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
     * @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
     * @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addColumnCall(String tableId, String tableName, String columnName, String type, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/columns"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (tableName != null)
        localVarFormParams.put("table_name", tableName);
        if (columnName != null)
        localVarFormParams.put("column_name", columnName);
        if (type != null)
        localVarFormParams.put("type", type);
        if (ui != null)
        localVarFormParams.put("ui", ui);
        if (hiddenInput != null)
        localVarFormParams.put("hidden_input", hiddenInput);
        if (hiddenList != null)
        localVarFormParams.put("hidden_list", hiddenList);
        if (required != null)
        localVarFormParams.put("required", required);
        if (sort != null)
        localVarFormParams.put("sort", sort);
        if (comment != null)
        localVarFormParams.put("comment", comment);
        if (relationshipType != null)
        localVarFormParams.put("relationship_type", relationshipType);
        if (relatedTable != null)
        localVarFormParams.put("related_table", relatedTable);
        if (junctionTable != null)
        localVarFormParams.put("junction_table", junctionTable);
        if (junctionKeyLeft != null)
        localVarFormParams.put("junction_key_left", junctionKeyLeft);
        if (junctionKeyRight != null)
        localVarFormParams.put("junction_key_right", junctionKeyRight);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addColumnValidateBeforeCall(String tableId, String tableName, String columnName, String type, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling addColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addColumnCall(tableId, tableName, columnName, type, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a column in a given table
     * 
     * @param tableId ID of table to return rows from (required)
     * @param tableName Name of table to add (optional)
     * @param columnName The unique name of the column to create (optional)
     * @param type The datatype of the column, eg: INT (optional)
     * @param ui The Directus Interface to use for this column (optional)
     * @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
     * @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
     * @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param comment A helpful note to users for this column (optional)
     * @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
     * @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
     * @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
     * @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
     * @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addColumn(String tableId, String tableName, String columnName, String type, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight) throws ApiException {
        addColumnWithHttpInfo(tableId, tableName, columnName, type, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);
    }

    /**
     * Create a column in a given table
     * 
     * @param tableId ID of table to return rows from (required)
     * @param tableName Name of table to add (optional)
     * @param columnName The unique name of the column to create (optional)
     * @param type The datatype of the column, eg: INT (optional)
     * @param ui The Directus Interface to use for this column (optional)
     * @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
     * @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
     * @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param comment A helpful note to users for this column (optional)
     * @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
     * @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
     * @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
     * @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
     * @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addColumnWithHttpInfo(String tableId, String tableName, String columnName, String type, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight) throws ApiException {
        com.squareup.okhttp.Call call = addColumnValidateBeforeCall(tableId, tableName, columnName, type, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a column in a given table (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param tableName Name of table to add (optional)
     * @param columnName The unique name of the column to create (optional)
     * @param type The datatype of the column, eg: INT (optional)
     * @param ui The Directus Interface to use for this column (optional)
     * @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
     * @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
     * @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param comment A helpful note to users for this column (optional)
     * @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
     * @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
     * @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
     * @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
     * @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addColumnAsync(String tableId, String tableName, String columnName, String type, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addColumnValidateBeforeCall(tableId, tableName, columnName, type, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addRow
     * @param tableId ID of table to return rows from (required)
     * @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRowCall(String tableId, String customData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customData;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/rows"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRowValidateBeforeCall(String tableId, String customData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling addRow(Async)");
        }
        
        // verify the required parameter 'customData' is set
        if (customData == null) {
            throw new ApiException("Missing the required parameter 'customData' when calling addRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addRowCall(tableId, customData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addRow(String tableId, String customData) throws ApiException {
        addRowWithHttpInfo(tableId, customData);
    }

    /**
     * Add a new row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addRowWithHttpInfo(String tableId, String customData) throws ApiException {
        com.squareup.okhttp.Call call = addRowValidateBeforeCall(tableId, customData, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a new row (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRowAsync(String tableId, String customData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRowValidateBeforeCall(tableId, customData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addTable
     * @param name Name of table to add (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTableCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTableValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addTableCall(name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new table
     * 
     * @param name Name of table to add (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addTable(String name) throws ApiException {
        addTableWithHttpInfo(name);
    }

    /**
     * Add a new table
     * 
     * @param name Name of table to add (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addTableWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = addTableValidateBeforeCall(name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a new table (asynchronously)
     * 
     * @param name Name of table to add (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTableAsync(String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTableValidateBeforeCall(name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteColumn
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteColumnCall(String tableId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/columns/{columnName}"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()))
            .replaceAll("\\{" + "columnName" + "\\}", apiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteColumnValidateBeforeCall(String tableId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling deleteColumn(Async)");
        }
        
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling deleteColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteColumnCall(tableId, columnName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteColumn(String tableId, String columnName) throws ApiException {
        deleteColumnWithHttpInfo(tableId, columnName);
    }

    /**
     * Delete row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteColumnWithHttpInfo(String tableId, String columnName) throws ApiException {
        com.squareup.okhttp.Call call = deleteColumnValidateBeforeCall(tableId, columnName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete row (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteColumnAsync(String tableId, String columnName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteColumnValidateBeforeCall(tableId, columnName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRow
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRowCall(String tableId, Integer rowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/rows/{rowId}"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()))
            .replaceAll("\\{" + "rowId" + "\\}", apiClient.escapeString(rowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRowValidateBeforeCall(String tableId, Integer rowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling deleteRow(Async)");
        }
        
        // verify the required parameter 'rowId' is set
        if (rowId == null) {
            throw new ApiException("Missing the required parameter 'rowId' when calling deleteRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRowCall(tableId, rowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRow(String tableId, Integer rowId) throws ApiException {
        deleteRowWithHttpInfo(tableId, rowId);
    }

    /**
     * Delete row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRowWithHttpInfo(String tableId, Integer rowId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRowValidateBeforeCall(tableId, rowId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete row (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRowAsync(String tableId, Integer rowId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRowValidateBeforeCall(tableId, rowId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTable
     * @param tableId ID of table to return rows from (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTableValidateBeforeCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling deleteTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTableCall(tableId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Table
     * 
     * @param tableId ID of table to return rows from (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTable(String tableId) throws ApiException {
        deleteTableWithHttpInfo(tableId);
    }

    /**
     * Delete Table
     * 
     * @param tableId ID of table to return rows from (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTableWithHttpInfo(String tableId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTableValidateBeforeCall(tableId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Table (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTableAsync(String tableId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableValidateBeforeCall(tableId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTable
     * @param tableId ID of table to return rows from (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableValidateBeforeCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTableCall(tableId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns specific table
     * 
     * @param tableId ID of table to return rows from (required)
     * @return GetTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTable getTable(String tableId) throws ApiException {
        ApiResponse<GetTable> resp = getTableWithHttpInfo(tableId);
        return resp.getData();
    }

    /**
     * Returns specific table
     * 
     * @param tableId ID of table to return rows from (required)
     * @return ApiResponse&lt;GetTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTable> getTableWithHttpInfo(String tableId) throws ApiException {
        com.squareup.okhttp.Call call = getTableValidateBeforeCall(tableId, null, null);
        Type localVarReturnType = new TypeToken<GetTable>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns specific table (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableAsync(String tableId, final ApiCallback<GetTable> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableValidateBeforeCall(tableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTable>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTableColumn
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableColumnCall(String tableId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/columns/{columnName}"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()))
            .replaceAll("\\{" + "columnName" + "\\}", apiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableColumnValidateBeforeCall(String tableId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getTableColumn(Async)");
        }
        
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling getTableColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTableColumnCall(tableId, columnName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns specific table column
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @return GetTableColumn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTableColumn getTableColumn(String tableId, String columnName) throws ApiException {
        ApiResponse<GetTableColumn> resp = getTableColumnWithHttpInfo(tableId, columnName);
        return resp.getData();
    }

    /**
     * Returns specific table column
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @return ApiResponse&lt;GetTableColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTableColumn> getTableColumnWithHttpInfo(String tableId, String columnName) throws ApiException {
        com.squareup.okhttp.Call call = getTableColumnValidateBeforeCall(tableId, columnName, null, null);
        Type localVarReturnType = new TypeToken<GetTableColumn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns specific table column (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableColumnAsync(String tableId, String columnName, final ApiCallback<GetTableColumn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableColumnValidateBeforeCall(tableId, columnName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTableColumn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTableColumns
     * @param tableId ID of table to return rows from (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableColumnsCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/columns"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableColumnsValidateBeforeCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getTableColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTableColumnsCall(tableId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns table columns
     * 
     * @param tableId ID of table to return rows from (required)
     * @return GetTableColumns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTableColumns getTableColumns(String tableId) throws ApiException {
        ApiResponse<GetTableColumns> resp = getTableColumnsWithHttpInfo(tableId);
        return resp.getData();
    }

    /**
     * Returns table columns
     * 
     * @param tableId ID of table to return rows from (required)
     * @return ApiResponse&lt;GetTableColumns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTableColumns> getTableColumnsWithHttpInfo(String tableId) throws ApiException {
        com.squareup.okhttp.Call call = getTableColumnsValidateBeforeCall(tableId, null, null);
        Type localVarReturnType = new TypeToken<GetTableColumns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns table columns (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableColumnsAsync(String tableId, final ApiCallback<GetTableColumns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableColumnsValidateBeforeCall(tableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTableColumns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTableRow
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableRowCall(String tableId, Integer rowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/rows/{rowId}"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()))
            .replaceAll("\\{" + "rowId" + "\\}", apiClient.escapeString(rowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableRowValidateBeforeCall(String tableId, Integer rowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getTableRow(Async)");
        }
        
        // verify the required parameter 'rowId' is set
        if (rowId == null) {
            throw new ApiException("Missing the required parameter 'rowId' when calling getTableRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTableRowCall(tableId, rowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns specific table row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @return GetTableRow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTableRow getTableRow(String tableId, Integer rowId) throws ApiException {
        ApiResponse<GetTableRow> resp = getTableRowWithHttpInfo(tableId, rowId);
        return resp.getData();
    }

    /**
     * Returns specific table row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @return ApiResponse&lt;GetTableRow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTableRow> getTableRowWithHttpInfo(String tableId, Integer rowId) throws ApiException {
        com.squareup.okhttp.Call call = getTableRowValidateBeforeCall(tableId, rowId, null, null);
        Type localVarReturnType = new TypeToken<GetTableRow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns specific table row (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableRowAsync(String tableId, Integer rowId, final ApiCallback<GetTableRow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableRowValidateBeforeCall(tableId, rowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTableRow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTableRows
     * @param tableId ID of table to return rows from (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableRowsCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/rows"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableRowsValidateBeforeCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getTableRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTableRowsCall(tableId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns table rows
     * 
     * @param tableId ID of table to return rows from (required)
     * @return GetTableRows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTableRows getTableRows(String tableId) throws ApiException {
        ApiResponse<GetTableRows> resp = getTableRowsWithHttpInfo(tableId);
        return resp.getData();
    }

    /**
     * Returns table rows
     * 
     * @param tableId ID of table to return rows from (required)
     * @return ApiResponse&lt;GetTableRows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTableRows> getTableRowsWithHttpInfo(String tableId) throws ApiException {
        com.squareup.okhttp.Call call = getTableRowsValidateBeforeCall(tableId, null, null);
        Type localVarReturnType = new TypeToken<GetTableRows>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns table rows (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableRowsAsync(String tableId, final ApiCallback<GetTableRows> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableRowsValidateBeforeCall(tableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTableRows>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTables
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTablesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTablesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getTablesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns tables
     * 
     * @return GetTables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTables getTables() throws ApiException {
        ApiResponse<GetTables> resp = getTablesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Returns tables
     * 
     * @return ApiResponse&lt;GetTables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTables> getTablesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTablesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetTables>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns tables (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTablesAsync(final ApiCallback<GetTables> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTablesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTables>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateColumn
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @param dataType The datatype of the column, eg: INT (optional)
     * @param ui The Directus Interface to use for this column (optional)
     * @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
     * @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
     * @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param comment A helpful note to users for this column (optional)
     * @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
     * @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
     * @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
     * @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
     * @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateColumnCall(String tableId, String columnName, String dataType, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/columns/{columnName}"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()))
            .replaceAll("\\{" + "columnName" + "\\}", apiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (dataType != null)
        localVarFormParams.put("data_type", dataType);
        if (ui != null)
        localVarFormParams.put("ui", ui);
        if (hiddenInput != null)
        localVarFormParams.put("hidden_input", hiddenInput);
        if (hiddenList != null)
        localVarFormParams.put("hidden_list", hiddenList);
        if (required != null)
        localVarFormParams.put("required", required);
        if (sort != null)
        localVarFormParams.put("sort", sort);
        if (comment != null)
        localVarFormParams.put("comment", comment);
        if (relationshipType != null)
        localVarFormParams.put("relationship_type", relationshipType);
        if (relatedTable != null)
        localVarFormParams.put("related_table", relatedTable);
        if (junctionTable != null)
        localVarFormParams.put("junction_table", junctionTable);
        if (junctionKeyLeft != null)
        localVarFormParams.put("junction_key_left", junctionKeyLeft);
        if (junctionKeyRight != null)
        localVarFormParams.put("junction_key_right", junctionKeyRight);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateColumnValidateBeforeCall(String tableId, String columnName, String dataType, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling updateColumn(Async)");
        }
        
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling updateColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateColumnCall(tableId, columnName, dataType, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update column
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @param dataType The datatype of the column, eg: INT (optional)
     * @param ui The Directus Interface to use for this column (optional)
     * @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
     * @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
     * @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param comment A helpful note to users for this column (optional)
     * @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
     * @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
     * @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
     * @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
     * @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateColumn(String tableId, String columnName, String dataType, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight) throws ApiException {
        updateColumnWithHttpInfo(tableId, columnName, dataType, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight);
    }

    /**
     * Update column
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @param dataType The datatype of the column, eg: INT (optional)
     * @param ui The Directus Interface to use for this column (optional)
     * @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
     * @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
     * @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param comment A helpful note to users for this column (optional)
     * @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
     * @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
     * @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
     * @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
     * @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateColumnWithHttpInfo(String tableId, String columnName, String dataType, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight) throws ApiException {
        com.squareup.okhttp.Call call = updateColumnValidateBeforeCall(tableId, columnName, dataType, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update column (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param columnName Name of column to return (required)
     * @param dataType The datatype of the column, eg: INT (optional)
     * @param ui The Directus Interface to use for this column (optional)
     * @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
     * @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
     * @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param comment A helpful note to users for this column (optional)
     * @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
     * @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
     * @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
     * @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
     * @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateColumnAsync(String tableId, String columnName, String dataType, String ui, Boolean hiddenInput, Boolean hiddenList, Boolean required, Integer sort, String comment, String relationshipType, String relatedTable, String junctionTable, String junctionKeyLeft, String junctionKeyRight, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateColumnValidateBeforeCall(tableId, columnName, dataType, ui, hiddenInput, hiddenList, required, sort, comment, relationshipType, relatedTable, junctionTable, junctionKeyLeft, junctionKeyRight, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateRow
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRowCall(String tableId, Integer rowId, String customData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customData;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/rows/{rowId}"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()))
            .replaceAll("\\{" + "rowId" + "\\}", apiClient.escapeString(rowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRowValidateBeforeCall(String tableId, Integer rowId, String customData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling updateRow(Async)");
        }
        
        // verify the required parameter 'rowId' is set
        if (rowId == null) {
            throw new ApiException("Missing the required parameter 'rowId' when calling updateRow(Async)");
        }
        
        // verify the required parameter 'customData' is set
        if (customData == null) {
            throw new ApiException("Missing the required parameter 'customData' when calling updateRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRowCall(tableId, rowId, customData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRow(String tableId, Integer rowId, String customData) throws ApiException {
        updateRowWithHttpInfo(tableId, rowId, customData);
    }

    /**
     * Update row
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRowWithHttpInfo(String tableId, Integer rowId, String customData) throws ApiException {
        com.squareup.okhttp.Call call = updateRowValidateBeforeCall(tableId, rowId, customData, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update row (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param rowId ID of row to return from rows (required)
     * @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRowAsync(String tableId, Integer rowId, String customData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRowValidateBeforeCall(tableId, rowId, customData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
