/*
 * directus.io
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.directus.client.ApiCallback;
import io.directus.client.ApiClient;
import io.directus.client.ApiException;
import io.directus.client.ApiResponse;
import io.directus.client.Configuration;
import io.directus.client.Pair;
import io.directus.client.ProgressRequestBody;
import io.directus.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.directus.client.model.GetPreferences;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreferencesApi {
    private ApiClient apiClient;

    public PreferencesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreferencesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPreferences
     * @param tableId ID of table to return rows from (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPreferencesCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/preferences"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPreferencesValidateBeforeCall(String tableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getPreferences(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPreferencesCall(tableId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns table preferences
     * 
     * @param tableId ID of table to return rows from (required)
     * @return GetPreferences
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPreferences getPreferences(String tableId) throws ApiException {
        ApiResponse<GetPreferences> resp = getPreferencesWithHttpInfo(tableId);
        return resp.getData();
    }

    /**
     * Returns table preferences
     * 
     * @param tableId ID of table to return rows from (required)
     * @return ApiResponse&lt;GetPreferences&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPreferences> getPreferencesWithHttpInfo(String tableId) throws ApiException {
        com.squareup.okhttp.Call call = getPreferencesValidateBeforeCall(tableId, null, null);
        Type localVarReturnType = new TypeToken<GetPreferences>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns table preferences (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPreferencesAsync(String tableId, final ApiCallback<GetPreferences> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPreferencesValidateBeforeCall(tableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPreferences>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePreferences
     * @param tableId ID of table to return rows from (required)
     * @param id Preference&#39;s Unique Identification number (optional)
     * @param tableName Name of table to add (optional)
     * @param columnsVisible List of visible columns, separated by commas (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param sortOrder Sort Order (ASC&#x3D;Ascending or DESC&#x3D;Descending) (optional)
     * @param status List of status values. separated by comma (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePreferencesCall(String tableId, String id, String tableName, String columnsVisible, Integer sort, String sortOrder, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{tableId}/preferences"
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (tableName != null)
        localVarFormParams.put("table_name", tableName);
        if (columnsVisible != null)
        localVarFormParams.put("columns_visible", columnsVisible);
        if (sort != null)
        localVarFormParams.put("sort", sort);
        if (sortOrder != null)
        localVarFormParams.put("sort_order", sortOrder);
        if (status != null)
        localVarFormParams.put("status", status);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePreferencesValidateBeforeCall(String tableId, String id, String tableName, String columnsVisible, Integer sort, String sortOrder, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling updatePreferences(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updatePreferencesCall(tableId, id, tableName, columnsVisible, sort, sortOrder, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update table preferences
     * 
     * @param tableId ID of table to return rows from (required)
     * @param id Preference&#39;s Unique Identification number (optional)
     * @param tableName Name of table to add (optional)
     * @param columnsVisible List of visible columns, separated by commas (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param sortOrder Sort Order (ASC&#x3D;Ascending or DESC&#x3D;Descending) (optional)
     * @param status List of status values. separated by comma (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePreferences(String tableId, String id, String tableName, String columnsVisible, Integer sort, String sortOrder, String status) throws ApiException {
        updatePreferencesWithHttpInfo(tableId, id, tableName, columnsVisible, sort, sortOrder, status);
    }

    /**
     * Update table preferences
     * 
     * @param tableId ID of table to return rows from (required)
     * @param id Preference&#39;s Unique Identification number (optional)
     * @param tableName Name of table to add (optional)
     * @param columnsVisible List of visible columns, separated by commas (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param sortOrder Sort Order (ASC&#x3D;Ascending or DESC&#x3D;Descending) (optional)
     * @param status List of status values. separated by comma (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePreferencesWithHttpInfo(String tableId, String id, String tableName, String columnsVisible, Integer sort, String sortOrder, String status) throws ApiException {
        com.squareup.okhttp.Call call = updatePreferencesValidateBeforeCall(tableId, id, tableName, columnsVisible, sort, sortOrder, status, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update table preferences (asynchronously)
     * 
     * @param tableId ID of table to return rows from (required)
     * @param id Preference&#39;s Unique Identification number (optional)
     * @param tableName Name of table to add (optional)
     * @param columnsVisible List of visible columns, separated by commas (optional)
     * @param sort The sort order of the column used to override the column order in the schema (optional)
     * @param sortOrder Sort Order (ASC&#x3D;Ascending or DESC&#x3D;Descending) (optional)
     * @param status List of status values. separated by comma (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePreferencesAsync(String tableId, String id, String tableName, String columnsVisible, Integer sort, String sortOrder, String status, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePreferencesValidateBeforeCall(tableId, id, tableName, columnsVisible, sort, sortOrder, status, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
