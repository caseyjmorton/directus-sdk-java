/*
 * directus.io
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.directus.client.ApiCallback;
import io.directus.client.ApiClient;
import io.directus.client.ApiException;
import io.directus.client.ApiResponse;
import io.directus.client.Configuration;
import io.directus.client.Pair;
import io.directus.client.ProgressRequestBody;
import io.directus.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.directus.client.model.GetGroup;
import io.directus.client.model.GetGroups;
import io.directus.client.model.GetPrivileges;
import io.directus.client.model.GetPrivilegesForTable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient apiClient;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addGroup
     * @param name Name of group to add (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGroupCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGroupValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addGroupCall(name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new group
     * 
     * @param name Name of group to add (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addGroup(String name) throws ApiException {
        addGroupWithHttpInfo(name);
    }

    /**
     * Add a new group
     * 
     * @param name Name of group to add (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addGroupWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = addGroupValidateBeforeCall(name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a new group (asynchronously)
     * 
     * @param name Name of group to add (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGroupAsync(String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGroupValidateBeforeCall(name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addPrivilege
     * @param groupId ID of group to return (required)
     * @param id Privilege&#39;s Unique Identification number (optional)
     * @param tableName Name of table to add (optional)
     * @param allowAdd Permission to add/create entries in the table (See values below) (optional)
     * @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
     * @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
     * @param allowView Permission to view/read entries in the table (See values below) (optional)
     * @param allowAlter Permission to add/create entries in the table (See values below) (optional)
     * @param navListed If the table should be visible in the sidebar for this user group (optional)
     * @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
     * @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
     * @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPrivilegeCall(String groupId, Integer id, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/privileges/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (tableName != null)
        localVarFormParams.put("table_name", tableName);
        if (allowAdd != null)
        localVarFormParams.put("allow_add", allowAdd);
        if (allowEdit != null)
        localVarFormParams.put("allow_edit", allowEdit);
        if (allowDelete != null)
        localVarFormParams.put("allow_delete", allowDelete);
        if (allowView != null)
        localVarFormParams.put("allow_view", allowView);
        if (allowAlter != null)
        localVarFormParams.put("allow_alter", allowAlter);
        if (navListed != null)
        localVarFormParams.put("nav_listed", navListed);
        if (readFieldBlacklist != null)
        localVarFormParams.put("read_field_blacklist", readFieldBlacklist);
        if (writeFieldBlacklist != null)
        localVarFormParams.put("write_field_blacklist", writeFieldBlacklist);
        if (statusId != null)
        localVarFormParams.put("status_id", statusId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPrivilegeValidateBeforeCall(String groupId, Integer id, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addPrivilege(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addPrivilegeCall(groupId, id, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new table privileges for the specified user group
     * 
     * @param groupId ID of group to return (required)
     * @param id Privilege&#39;s Unique Identification number (optional)
     * @param tableName Name of table to add (optional)
     * @param allowAdd Permission to add/create entries in the table (See values below) (optional)
     * @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
     * @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
     * @param allowView Permission to view/read entries in the table (See values below) (optional)
     * @param allowAlter Permission to add/create entries in the table (See values below) (optional)
     * @param navListed If the table should be visible in the sidebar for this user group (optional)
     * @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
     * @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
     * @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPrivilege(String groupId, Integer id, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId) throws ApiException {
        addPrivilegeWithHttpInfo(groupId, id, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);
    }

    /**
     * Create new table privileges for the specified user group
     * 
     * @param groupId ID of group to return (required)
     * @param id Privilege&#39;s Unique Identification number (optional)
     * @param tableName Name of table to add (optional)
     * @param allowAdd Permission to add/create entries in the table (See values below) (optional)
     * @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
     * @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
     * @param allowView Permission to view/read entries in the table (See values below) (optional)
     * @param allowAlter Permission to add/create entries in the table (See values below) (optional)
     * @param navListed If the table should be visible in the sidebar for this user group (optional)
     * @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
     * @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
     * @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPrivilegeWithHttpInfo(String groupId, Integer id, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId) throws ApiException {
        com.squareup.okhttp.Call call = addPrivilegeValidateBeforeCall(groupId, id, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create new table privileges for the specified user group (asynchronously)
     * 
     * @param groupId ID of group to return (required)
     * @param id Privilege&#39;s Unique Identification number (optional)
     * @param tableName Name of table to add (optional)
     * @param allowAdd Permission to add/create entries in the table (See values below) (optional)
     * @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
     * @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
     * @param allowView Permission to view/read entries in the table (See values below) (optional)
     * @param allowAlter Permission to add/create entries in the table (See values below) (optional)
     * @param navListed If the table should be visible in the sidebar for this user group (optional)
     * @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
     * @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
     * @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPrivilegeAsync(String groupId, Integer id, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPrivilegeValidateBeforeCall(groupId, id, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getGroup
     * @param groupId ID of group to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGroupCall(String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/groups/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGroupValidateBeforeCall(String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getGroupCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns specific group
     * 
     * @param groupId ID of group to return (required)
     * @return GetGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetGroup getGroup(String groupId) throws ApiException {
        ApiResponse<GetGroup> resp = getGroupWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * Returns specific group
     * 
     * @param groupId ID of group to return (required)
     * @return ApiResponse&lt;GetGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetGroup> getGroupWithHttpInfo(String groupId) throws ApiException {
        com.squareup.okhttp.Call call = getGroupValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<GetGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns specific group (asynchronously)
     * 
     * @param groupId ID of group to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupAsync(String groupId, final ApiCallback<GetGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGroups
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGroupsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGroupsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getGroupsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns groups
     * 
     * @return GetGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetGroups getGroups() throws ApiException {
        ApiResponse<GetGroups> resp = getGroupsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Returns groups
     * 
     * @return ApiResponse&lt;GetGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetGroups> getGroupsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getGroupsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetGroups>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns groups (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupsAsync(final ApiCallback<GetGroups> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetGroups>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPrivileges
     * @param groupId ID of group to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPrivilegesCall(String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/privileges/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPrivilegesValidateBeforeCall(String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getPrivileges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPrivilegesCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns group privileges
     * 
     * @param groupId ID of group to return (required)
     * @return GetPrivileges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPrivileges getPrivileges(String groupId) throws ApiException {
        ApiResponse<GetPrivileges> resp = getPrivilegesWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * Returns group privileges
     * 
     * @param groupId ID of group to return (required)
     * @return ApiResponse&lt;GetPrivileges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPrivileges> getPrivilegesWithHttpInfo(String groupId) throws ApiException {
        com.squareup.okhttp.Call call = getPrivilegesValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<GetPrivileges>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns group privileges (asynchronously)
     * 
     * @param groupId ID of group to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPrivilegesAsync(String groupId, final ApiCallback<GetPrivileges> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPrivilegesValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPrivileges>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPrivilegesForTable
     * @param groupId ID of group to return (required)
     * @param tableNameOrPrivilegeId ID of privileges or Table Name to use (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPrivilegesForTableCall(String groupId, String tableNameOrPrivilegeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/privileges/{groupId}/{tableNameOrPrivilegeId}"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "tableNameOrPrivilegeId" + "\\}", apiClient.escapeString(tableNameOrPrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPrivilegesForTableValidateBeforeCall(String groupId, String tableNameOrPrivilegeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getPrivilegesForTable(Async)");
        }
        
        // verify the required parameter 'tableNameOrPrivilegeId' is set
        if (tableNameOrPrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'tableNameOrPrivilegeId' when calling getPrivilegesForTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPrivilegesForTableCall(groupId, tableNameOrPrivilegeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns group privileges by tableName
     * 
     * @param groupId ID of group to return (required)
     * @param tableNameOrPrivilegeId ID of privileges or Table Name to use (required)
     * @return GetPrivilegesForTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPrivilegesForTable getPrivilegesForTable(String groupId, String tableNameOrPrivilegeId) throws ApiException {
        ApiResponse<GetPrivilegesForTable> resp = getPrivilegesForTableWithHttpInfo(groupId, tableNameOrPrivilegeId);
        return resp.getData();
    }

    /**
     * Returns group privileges by tableName
     * 
     * @param groupId ID of group to return (required)
     * @param tableNameOrPrivilegeId ID of privileges or Table Name to use (required)
     * @return ApiResponse&lt;GetPrivilegesForTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPrivilegesForTable> getPrivilegesForTableWithHttpInfo(String groupId, String tableNameOrPrivilegeId) throws ApiException {
        com.squareup.okhttp.Call call = getPrivilegesForTableValidateBeforeCall(groupId, tableNameOrPrivilegeId, null, null);
        Type localVarReturnType = new TypeToken<GetPrivilegesForTable>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns group privileges by tableName (asynchronously)
     * 
     * @param groupId ID of group to return (required)
     * @param tableNameOrPrivilegeId ID of privileges or Table Name to use (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPrivilegesForTableAsync(String groupId, String tableNameOrPrivilegeId, final ApiCallback<GetPrivilegesForTable> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPrivilegesForTableValidateBeforeCall(groupId, tableNameOrPrivilegeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPrivilegesForTable>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePrivileges
     * @param groupId ID of group to return (required)
     * @param tableNameOrPrivilegeId ID of privileges or Table Name to use (required)
     * @param privilegesId ubique privilege ID (optional)
     * @param groupId2 ID of group to return (optional)
     * @param tableName Name of table to add (optional)
     * @param allowAdd Permission to add/create entries in the table (See values below) (optional)
     * @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
     * @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
     * @param allowView Permission to view/read entries in the table (See values below) (optional)
     * @param allowAlter Permission to add/create entries in the table (See values below) (optional)
     * @param navListed If the table should be visible in the sidebar for this user group (optional)
     * @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
     * @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
     * @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePrivilegesCall(String groupId, String tableNameOrPrivilegeId, String privilegesId, String groupId2, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/privileges/{groupId}/{tableNameOrPrivilegeId}"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "tableNameOrPrivilegeId" + "\\}", apiClient.escapeString(tableNameOrPrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (privilegesId != null)
        localVarFormParams.put("privileges_id", privilegesId);
        if (groupId2 != null)
        localVarFormParams.put("group_id", groupId2);
        if (tableName != null)
        localVarFormParams.put("table_name", tableName);
        if (allowAdd != null)
        localVarFormParams.put("allow_add", allowAdd);
        if (allowEdit != null)
        localVarFormParams.put("allow_edit", allowEdit);
        if (allowDelete != null)
        localVarFormParams.put("allow_delete", allowDelete);
        if (allowView != null)
        localVarFormParams.put("allow_view", allowView);
        if (allowAlter != null)
        localVarFormParams.put("allow_alter", allowAlter);
        if (navListed != null)
        localVarFormParams.put("nav_listed", navListed);
        if (readFieldBlacklist != null)
        localVarFormParams.put("read_field_blacklist", readFieldBlacklist);
        if (writeFieldBlacklist != null)
        localVarFormParams.put("write_field_blacklist", writeFieldBlacklist);
        if (statusId != null)
        localVarFormParams.put("status_id", statusId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePrivilegesValidateBeforeCall(String groupId, String tableNameOrPrivilegeId, String privilegesId, String groupId2, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updatePrivileges(Async)");
        }
        
        // verify the required parameter 'tableNameOrPrivilegeId' is set
        if (tableNameOrPrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'tableNameOrPrivilegeId' when calling updatePrivileges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updatePrivilegesCall(groupId, tableNameOrPrivilegeId, privilegesId, groupId2, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update privileges by privilegeId
     * 
     * @param groupId ID of group to return (required)
     * @param tableNameOrPrivilegeId ID of privileges or Table Name to use (required)
     * @param privilegesId ubique privilege ID (optional)
     * @param groupId2 ID of group to return (optional)
     * @param tableName Name of table to add (optional)
     * @param allowAdd Permission to add/create entries in the table (See values below) (optional)
     * @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
     * @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
     * @param allowView Permission to view/read entries in the table (See values below) (optional)
     * @param allowAlter Permission to add/create entries in the table (See values below) (optional)
     * @param navListed If the table should be visible in the sidebar for this user group (optional)
     * @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
     * @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
     * @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePrivileges(String groupId, String tableNameOrPrivilegeId, String privilegesId, String groupId2, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId) throws ApiException {
        updatePrivilegesWithHttpInfo(groupId, tableNameOrPrivilegeId, privilegesId, groupId2, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId);
    }

    /**
     * Update privileges by privilegeId
     * 
     * @param groupId ID of group to return (required)
     * @param tableNameOrPrivilegeId ID of privileges or Table Name to use (required)
     * @param privilegesId ubique privilege ID (optional)
     * @param groupId2 ID of group to return (optional)
     * @param tableName Name of table to add (optional)
     * @param allowAdd Permission to add/create entries in the table (See values below) (optional)
     * @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
     * @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
     * @param allowView Permission to view/read entries in the table (See values below) (optional)
     * @param allowAlter Permission to add/create entries in the table (See values below) (optional)
     * @param navListed If the table should be visible in the sidebar for this user group (optional)
     * @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
     * @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
     * @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePrivilegesWithHttpInfo(String groupId, String tableNameOrPrivilegeId, String privilegesId, String groupId2, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId) throws ApiException {
        com.squareup.okhttp.Call call = updatePrivilegesValidateBeforeCall(groupId, tableNameOrPrivilegeId, privilegesId, groupId2, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update privileges by privilegeId (asynchronously)
     * 
     * @param groupId ID of group to return (required)
     * @param tableNameOrPrivilegeId ID of privileges or Table Name to use (required)
     * @param privilegesId ubique privilege ID (optional)
     * @param groupId2 ID of group to return (optional)
     * @param tableName Name of table to add (optional)
     * @param allowAdd Permission to add/create entries in the table (See values below) (optional)
     * @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
     * @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
     * @param allowView Permission to view/read entries in the table (See values below) (optional)
     * @param allowAlter Permission to add/create entries in the table (See values below) (optional)
     * @param navListed If the table should be visible in the sidebar for this user group (optional)
     * @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
     * @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
     * @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePrivilegesAsync(String groupId, String tableNameOrPrivilegeId, String privilegesId, String groupId2, String tableName, Integer allowAdd, Integer allowEdit, Integer allowDelete, Integer allowView, Integer allowAlter, Boolean navListed, String readFieldBlacklist, String writeFieldBlacklist, String statusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePrivilegesValidateBeforeCall(groupId, tableNameOrPrivilegeId, privilegesId, groupId2, tableName, allowAdd, allowEdit, allowDelete, allowView, allowAlter, navListed, readFieldBlacklist, writeFieldBlacklist, statusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
